import "Bullets/Debug Tools.del";
import "Bullets/Container.del";

rule: "good luck dum dum"
{
    define a = new Empty();
}

class Empty
{
    define wow = 123;
}

rule: "Commands"
Event.OngoingPlayer
{
    CreateHudText(EventPlayer(), null, "ultimate_ability: build sphere", null, Location.Right, 0, Color.White, Color.White);
    CreateHudText(EventPlayer(), null, "crouch + ultimate_ability: destroy sphere", null, Location.Right, 1, Color.White, Color.White);
    CreateHudText(EventPlayer(), null, "interact: select sphere", null, Location.Right, 2, Color.White, Color.Blue);
    CreateHudText(EventPlayer(), null, "crouch + interact: stop selecting spheres", null, Location.Right, 3, Color.White, Color.Blue);
    CreateHudText(EventPlayer(), null, "fold: connect", IsCommunicating(EventPlayer(), Communication.Acknowledge), Location.Right, 4, Color.White, Color.Green);
    CreateHudText(EventPlayer(), null, "crouch + fold: stop connect", IsCommunicating(EventPlayer(), Communication.Acknowledge), Location.Right, 5, Color.White, Color.Green);
}

macro GetClosestNode(): FirstOf(SortedArray(Nodes, DistanceBetween(EyePosition(EventPlayer()), (<Node>ArrayElement()).Location)));
macro IsNodeSelectable(Node node): DistanceBetween(node.Location, EyePosition(EventPlayer())) < 5;

rule: "Create node"
Event.OngoingPlayer
if (IsButtonHeld(EventPlayer(), Button.Ultimate))
if (!IsButtonHeld(EventPlayer(), Button.Crouch))
{
    Nodes = Append(Nodes, new Node());
    (<Node>LastOf(Nodes)).Show();
}

rule: "Delete node"
Event.OngoingPlayer
if (IsButtonHeld(EventPlayer(), Button.Ultimate))
if (IsButtonHeld(EventPlayer(), Button.Crouch))
{
    Node selected = GetClosestNode();
    if (!IsNodeSelectable(selected)) return;

    for (define i = CountOf(Segments) - 1; i >= 0; i--)
        if (ArrayContains((<Segment>Segments[i]).Nodes, selected))
        {
            DestroyEffect((<Segment>Segments[i]).EffectID);
            delete(Segments[i]);
            Segments = RemoveFromArrayAtIndex(Segments, i);
        }
    PlayEffect(AllPlayers(), PlayEffect.BadExplosion, Color.Blue, selected.Location, 0.25);
    selected.Hide();
    Selected = RemoveFromArray(Selected, selected);
    Nodes = RemoveFromArray(Nodes, selected); 
    delete(selected);
}

rule: "Select"
Event.OngoingPlayer
if (IsButtonHeld(EventPlayer(), Button.Interact))
if (!IsButtonHeld(EventPlayer(), Button.Crouch))
{
    Node selected = GetClosestNode();
    if (!IsNodeSelectable(selected)) return;

    if (!selected.Selected)
    {        
        selected.Select();
        Selected = Append(Selected, selected);
    }
    else
    {
        selected.Deselect();
        Selected = RemoveFromArray(Selected, selected);
    }
}

rule: "Deselect all"
Event.OngoingPlayer
if (IsButtonHeld(EventPlayer(), Button.Interact))
if (IsButtonHeld(EventPlayer(), Button.Crouch))
{
    foreach (Node selected in Selected)
        selected.Deselect();
    Selected = EmptyArray();
}

define globalvar Nodes = EmptyArray();
define globalvar Selected = EmptyArray();

class Node
{
    public define Location;
    private define EffectID;
    public define Selected = false;
    private define visible = false;

    public Node()
    {
        Location = EyePosition();
    }

    public method Show()
    {
        if (!visible)
        {
            Update();
            visible = true;
        }
    }

    public method Hide()
    {
        if (visible)
        {
            DestroyEffect(EffectID);
            visible = false;
        }
    }
    
    public method Select()
    {
        Selected = true;
        Update();
    }

    public method Deselect()
    {
        Selected = false;
        Update();
    }

    private method Update()
    {
        DestroyEffect(EffectID);
        if (!Selected)
            Make(Color.Blue);
        else
            Make(Color.Green);
        EffectID = LastCreatedEntity();
    }

    private method Make(Color color)
    {
        CreateEffect(AllPlayers(), Effect.Sphere, color, Location, 0.25, EffectRev.VisibleTo);
    }
}

define playervar acknowledgeReady = true;

rule: "Create Segments"
Event.OngoingPlayer
if (IsCommunicating(EventPlayer(), Communication.Acknowledge))
if (!IsButtonHeld(EventPlayer(), Button.Crouch))
if (acknowledgeReady)
{
    for (define f = 0; f < CountOf(Selected); f++)
        for (define l = 0; l < CountOf(Selected); l++)
            if (l != f && !IsTrueForAny(Segments, ArrayContains((<Segment>ArrayElement()).Nodes, Selected[f]) && ArrayContains((<Segment>ArrayElement()).Nodes, Selected[l])))
            {
                Segments = Append(Segments, new Segment(<Node>Selected[f], <Node>Selected[l]));
            }
    acknowledgeReady = false;
}

rule: "Delete Segments"
Event.OngoingPlayer
if (IsCommunicating(EventPlayer(), Communication.Acknowledge))
if (IsButtonHeld(EventPlayer(), Button.Crouch))
if (acknowledgeReady)
{
    for (define i = CountOf(Segments) - 1; i >= 0; i--)
        if (IsTrueForAll((<Segment>Segments[i]).Nodes, ArrayContains(Selected, ArrayElement())))
        {
            DestroyEffect((<Segment>Segments[i]).EffectID);
            delete(Segments[i]);
            Segments = RemoveFromArrayAtIndex(Segments, i);
        }
    acknowledgeReady = false;
}

rule: "Reset Acknowledge"
Event.OngoingPlayer
if (!IsCommunicating(EventPlayer(), Communication.Acknowledge))
if (!acknowledgeReady)
{
    acknowledgeReady = true;
}

define globalvar Segments = EmptyArray();

class Segment
{
    public Node Node1;
    public Node Node2;
    public define Nodes;
    define EffectID;

    public Segment(Node node1, Node node2)
    {
        Node1 = node1;
        Node2 = node2;
        Nodes = [Node1, Node2];
        CreateBeamEffect(AllPlayers(), BeamType.GrappleBeam, Node1.Location, Node2.Location, Color.Red, EffectRev.VisibleTo);
        EffectID = LastCreatedEntity();
    }
}

rule: "CSV out"
Event.OngoingPlayer
if (IsCommunicating(EventPlayer(), Communication.VoiceLineUp))
{
    SmallMessage(AllPlayers(), "building ...");
    isBuilding = true;

    for (define i = 0; i < CountOf(Nodes); i++)
    {
        buildingNode = (<Node>Nodes[i]).Location;
        buildingNodeIndex = i;
    }
    
    for (define i = 0; i < CountOf(Segments); i++)
    {
        connect1 = IndexOfArrayValue(Nodes, (<Segment>Segments[i]).Node1);
        connect2 = IndexOfArrayValue(Nodes, (<Segment>Segments[i]).Node2);
        connectIndex = i;
    }

    SmallMessage(AllPlayers(), "downloaded!");
    isBuilding = false;
}

define globalvar isBuilding        D = false;
define globalvar buildingNodeIndex E = -1;
define globalvar buildingNode      F = -1;
define globalvar connectIndex      G = -1;
define globalvar connect1          H = -1;
define globalvar connect2          I = -1;